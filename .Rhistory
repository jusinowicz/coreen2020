    DIT_tmp[(nt2/2+1):nt2,5] = (rspecies)[2]
    DIT_tmp[(k+1):nt2,6] = aiE_webS[[f]]$local
    #Because resident corresponds to te1 (ai1, etc.), and which species is 
    #resident switches:
    DIT_tmp[ (k+1):(nt21*2),7:8] = di_webS[[f]]$te_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),7:8] = di_webS[[f]]$te_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 9 ] = di_webS[[f]]$te_local[,1] #Algae
DIT_tmp[ (k+1):(nt21*2-k),10:11] = di_webS[[f]]$ee_local[1:(nt21*2-2*k),4:3]
    DIT_tmp[ (nt21*2+1):(nt21*4-2*k),10:11] = di_webS[[f]]$ee_local[(nt21*2+1):(nt21*4-2*k),3:4]
    DIT_tmp[ (k*2):(nt2), 12 ] = di_webS[[f]]$ee_local[,1] #Algae
  DIT_tmp[ (k+1):(nt21*2),13:14] = di_webS[[f]]$ai_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),13:14] = di_webS[[f]]$ai_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 15 ] = di_webS[[f]]$ai_local[,1] #Algae
  DIT_tmp[ (k+1):(nt21*2),16:17] = di_webS[[f]]$si_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),16:17] = di_webS[[f]]$si_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 18 ] = di_webS[[f]]$si_local[,1] #Algae
    #Temperatures
    DIT_tmp[,19] = temps[f]
    #Treatment type (invasion vs. monoculture) and number of species
spp1 = c(1:(nt2/4),(nt2/2+1):(nt2/2+nt2/4)) #Sinlge species
    spp2 = c((nt2/4+1):(nt2/2),(nt2/2+nt2/4+1):nt2) #Invasion, 2 spp
    DIT_tmp[,20] = factor(levels = levels(invader))
    DIT_tmp[1:nt2/2,20] = invader[2]
    DIT_tmp[(nt2/2+1):nt2,20] = invader[3]
    DIT_tmp[spp1,20] =  invader[1]
    DIT_tmp[,21] = factor(levels = levels(nspps2))
    DIT_tmp[spp1,21] = nspps2[1]
    DIT_tmp[spp2,21] = nspps2[2]
#Algal consumption rates. 
#Resident
DIT_tmp[1:(nt2/2),22] = (spp_prms$cC[1,2]*DIT_tmp$Algae[1:(nt2/2)])/DIT_tmp[1:(nt2/2),2]#Dia
DIT_tmp[(nt2/2+1):nt2,22]  = (spp_prms$cC[1,1]*DIT_tmp$Algae[(nt2/2+1):nt2])/DIT_tmp[(nt2/2+1):nt2,2]#Daph
DIT_tmp[,22] [is.infinite(DIT_tmp$alg_per_Nres)] = NA
#Invader
    DIT_tmp[1:(nt2/2),23] = (spp_prms$cC[1,1]*DIT_tmp$Algae[1:(nt2/2)])/DIT_tmp[1:(nt2/2),3]#Daph
DIT_tmp[(nt2/2+1):nt2,23] = (spp_prms$cC[1,2]*DIT_tmp$Algae[(nt2/2+1):nt2])/DIT_tmp[(nt2/2+1):nt2,3]#Dia
DIT_tmp[,23][is.infinite(DIT_tmp$alg_per_Ninv)] = NA
#Total Zoo
DIT_tmp[,24] = DIT_tmp$N_res+DIT_tmp$N_inv
DIT_tmp[,25] = ((spp_prms$cC[1,1]+spp_prms$cC[1,2])*DIT_tmp$Algae)/DIT_tmp$zoo
DIT_tmp[,25] [is.infinite(DIT_tmp$alg_perzoo)] = NA
#Real-time competition for resources: 
#Resident:
DIT_tmp[1:(nt2/2),26] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]^2*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),27] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,26] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,1]^2*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,27] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
#Invader: 
DIT_tmp[1:(nt2/2),28] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,1]^2*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),29] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,28] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]^2*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,29] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),30] = mean(DIT_tmp$m_alg_perInv[1:(nt2/2)])
DIT_tmp[(nt2/2+1):nt2,30] = mean(DIT_tmp$m_alg_perInv[(nt2/2+1):nt2])
DIT_tmp[,31] = mean(DIT_tmp$alg_perzoo,na.rm=T )
#Get the carrying capacity for each scenario: 
DIT_tmp[1:(nt2/4),32] = mean(DIT_tmp$N_res[1:(nt2/4)],na.rm=T)
DIT_tmp[(nt2/4+1):nt2/2,32] = mean(DIT_tmp$N_res[(nt2/4+1):nt2/2],na.rm=T)
DIT_tmp[(nt2/2+1):(nt2*3/4),32] = mean(DIT_tmp$N_res[(nt2/2+1):(nt2*3/4)],na.rm=T)
DIT_tmp[(nt2*3/4+1):(nt2),32] = mean(DIT_tmp$N_res[(nt2*3/4+1):(nt2)],na.rm=T)
DIT_tmp[1:(nt2/4),33] = mean(DIT_tmp$N_inv[1:(nt2/4)],na.rm=T)
DIT_tmp[(nt2/4+1):nt2/2,33] = mean(DIT_tmp$N_inv[(nt2/4+1):nt2/2],na.rm=T)
DIT_tmp[(nt2/2+1):(nt2*3/4),33] = mean(DIT_tmp$N_inv[(nt2/2+1):(nt2*3/4)],na.rm=T)
DIT_tmp[(nt2*3/4+1):(nt2),33] = mean(DIT_tmp$N_inv[(nt2*3/4+1):(nt2)],na.rm=T)
#Resident competition
    DIT_tmp[1:(nt2/2),34] = spp_prms$aii[2]#Dia
DIT_tmp[1:(nt2/2),35] = spp_prms$aij[2]#Dia
DIT_tmp[(nt2/2+1):nt2,34] = spp_prms$aii[1]#Daph
DIT_tmp[(nt2/2+1):nt2,35] = spp_prms$aij[1]#Daph
#Invader competition
   DIT_tmp[1:(nt2/2),36] = spp_prms$aii[1]#Daph
DIT_tmp[1:(nt2/2),37] = spp_prms$aij[1]#Daph
DIT_tmp[(nt2/2+1):nt2,36] = spp_prms$aii[2]#Dia
DIT_tmp[(nt2/2+1):nt2,37] = spp_prms$aij[2]#Dia
DIT_tmp[,38] = paste(f,DIT_tmp$res_spp,sep="")
    DIT_tmp = as.data.frame(DIT_tmp) 
    mDIT_tmp = rbind(mDIT_tmp,DIT_tmp)
}
#Add two time columns: time1 is absolute time from beginning of simulation, 
#day_n is adjusted relative to the invasion event to match up with the 
#experimental time scale
inv_day = 28
inv_day_n = ((tend*1/delta1+1) - inv_day )
mDIT = cbind(time1 = matrix(seq(0,tend*2+delta1,delta1),dim(mDIT_tmp)[1],1), 
day_n =matrix(seq(0,(tend*2)*1/delta1+1,1)-inv_day_n,dim(mDIT_tmp)[1],1) , mDIT_tmp)
#These are set manually: 
inv_day = 28 #The first day of attempted invasion
inv_end = 50#The last day of invasion conditions
no_reps = 18 #The number of replicated mesocosms total per resident/invader
nEspp=2
#These are from data: 
temps = (unique(m1_data_long$temperature))
ntemps =  length(unique(m1_data_long$temperature))
mesos = unique(m1_data_long$mesocosm_id)
nmesos =  length(mesos)
rspecies = unique(m1_data_long$species)
invader = unique(m1_data_long$invade_monoculture)
invasions_per = length(mesos)/4 #Treatment entries correponding to each spp 
#=
###Species numbers
#Assume 2 trophic levels unless otherwise specified.
nRsp = 2 #Algae
nCsp = 2 #Spp 1 is Daphnia, Spp 2 is Diaphanosoma
nPsp = 1 #This is actually 0 --> Just a dummy predator
nspp = nRsp+nCsp+nPsp
#Set k, the block size: 
k=2
f1R=1 #scaling term for converting fractional populations in simulations
f1S=1 #scaling term for converting fractional populations in simulations
mDIT_tmp = data.frame(matrix( nrow=0, ncol =38 ) ) 
ncnames = c("Algae", "N_res","N_inv", "res_spp","inv_spp", "aiE","te1","te2", "te3","ee1","ee2",
"ee3","ai1","ai2","ai3","si1","si2","si3","temperature","invade_monoculture","nspp","alg_per_Nres",
"alg_per_Ninv","zoo","alg_perzoo","res_aii_rt","res_aij_rt","inv_aii_rt",
"inv_aij_rt", "m_alg_perInv", "m_alg_perzoo", "res_K", "inv_K","res_aii", "res_aij", 
"inv_aii","inv_aij", "replicate_number" )
colnames(mDIT_tmp) = ncnames
#mesocosms = factor(c("A","B")) #A is Daphnia invader, B is Daphnia resident
nspps2 = factor(c(1,2)) #1 is the pre-invasion phase, 2 is post-invasion phase
nt21 = length(seq(0,tend,delta1))
nt22=nt2-k
for (f in 1:nwebs){
spp_prms = out1[[f]]$spp_prms
DIT_tmp = data.frame(matrix(0,nt2,38 ))
colnames(DIT_tmp) = ncnames
    DIT_tmp[,1] = as.matrix(out_inv1[[f]][,2])
    DIT_tmp[1:(nt2/2),2] = as.matrix(out_inv1[[f]][1:(nt2/2),5]) #First Daph as invader
    DIT_tmp[1:(nt2/2),3] = as.matrix(out_inv1[[f]][1:(nt2/2),4])
    DIT_tmp[(nt2/2+1):nt2,2] = as.matrix(out_inv1[[f]][(nt2/2+1):nt2,4]) #Second Dia as invader
    DIT_tmp[(nt2/2+1):nt2,3] = as.matrix(out_inv1[[f]][(nt2/2+1):nt2,5])
    
    DIT_tmp[,4] = factor( levels = levels(rspecies)) #Invader/resident IDs
    DIT_tmp[,5] = factor( levels = levels(rspecies))
DIT_tmp[1:(nt2/2),4] = (rspecies)[2]
    DIT_tmp[1:(nt2/2),5] = (rspecies)[1]
   DIT_tmp[(nt2/2+1):nt2,4] = (rspecies)[1]
    DIT_tmp[(nt2/2+1):nt2,5] = (rspecies)[2]
    DIT_tmp[(k+1):nt2,6] = aiE_webS[[f]]$local
    #Because resident corresponds to te1 (ai1, etc.), and which species is 
    #resident switches:
    DIT_tmp[ (k+1):(nt21*2),7:8] = di_webS[[f]]$te_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),7:8] = di_webS[[f]]$te_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 9 ] = di_webS[[f]]$te_local[,1] #Algae
DIT_tmp[ (k+1):(nt21*2-k),10:11] = di_webS[[f]]$ee_local[1:(nt21*2-2*k),4:3]
    DIT_tmp[ (nt21*2+1):(nt21*4-2*k),10:11] = di_webS[[f]]$ee_local[(nt21*2+1):(nt21*4-2*k),3:4]
    DIT_tmp[ (k*2):(nt2), 12 ] = di_webS[[f]]$ee_local[,1] #Algae
  DIT_tmp[ (k+1):(nt21*2),13:14] = di_webS[[f]]$ai_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),13:14] = di_webS[[f]]$ai_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 15 ] = di_webS[[f]]$ai_local[,1] #Algae
  DIT_tmp[ (k+1):(nt21*2),16:17] = di_webS[[f]]$si_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),16:17] = di_webS[[f]]$si_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 18 ] = di_webS[[f]]$si_local[,1] #Algae
    #Temperatures
    DIT_tmp[,19] = temps[f]
    #Treatment type (invasion vs. monoculture) and number of species
spp1 = c(1:(nt2/4),(nt2/2+1):(nt2/2+nt2/4)) #Sinlge species
    spp2 = c((nt2/4+1):(nt2/2),(nt2/2+nt2/4+1):nt2) #Invasion, 2 spp
    DIT_tmp[,20] = factor(levels = levels(invader))
    DIT_tmp[1:nt2/2,20] = invader[2]
    DIT_tmp[(nt2/2+1):nt2,20] = invader[3]
    DIT_tmp[spp1,20] =  invader[1]
    DIT_tmp[,21] = factor(levels = levels(nspps2))
    DIT_tmp[spp1,21] = nspps2[1]
    DIT_tmp[spp2,21] = nspps2[2]
#Algal consumption rates. 
#Resident
DIT_tmp[1:(nt2/2),22] = (spp_prms$cC[1,2]*DIT_tmp$Algae[1:(nt2/2)])/DIT_tmp[1:(nt2/2),2]#Dia
DIT_tmp[(nt2/2+1):nt2,22]  = (spp_prms$cC[1,1]*DIT_tmp$Algae[(nt2/2+1):nt2])/DIT_tmp[(nt2/2+1):nt2,2]#Daph
DIT_tmp[,22] [is.infinite(DIT_tmp$alg_per_Nres)] = NA
#Invader
    DIT_tmp[1:(nt2/2),23] = (spp_prms$cC[1,1]*DIT_tmp$Algae[1:(nt2/2)])/DIT_tmp[1:(nt2/2),3]#Daph
DIT_tmp[(nt2/2+1):nt2,23] = (spp_prms$cC[1,2]*DIT_tmp$Algae[(nt2/2+1):nt2])/DIT_tmp[(nt2/2+1):nt2,3]#Dia
DIT_tmp[,23][is.infinite(DIT_tmp$alg_per_Ninv)] = NA
#Total Zoo
DIT_tmp[,24] = DIT_tmp$N_res+DIT_tmp$N_inv
DIT_tmp[,25] = ((spp_prms$cC[1,1]+spp_prms$cC[1,2])*DIT_tmp$Algae)/DIT_tmp$zoo
DIT_tmp[,25] [is.infinite(DIT_tmp$alg_perzoo)] = NA
#Real-time competition for resources: 
#Resident:
DIT_tmp[1:(nt2/2),26] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]^2*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),27] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,26] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,1]^2*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,27] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
#Invader: 
DIT_tmp[1:(nt2/2),28] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,1]^2*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),29] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,28] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]^2*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,29] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),30] = mean(DIT_tmp$m_alg_perInv[1:(nt2/2)])
DIT_tmp[(nt2/2+1):nt2,30] = mean(DIT_tmp$m_alg_perInv[(nt2/2+1):nt2])
DIT_tmp[,31] = mean(DIT_tmp$alg_perzoo,na.rm=T )
#Get the carrying capacity for each scenario: 
DIT_tmp[1:(nt2/4),32] = mean(DIT_tmp$N_res[1:(nt2/4)],na.rm=T)
DIT_tmp[(nt2/4+1):nt2/2,32] = mean(DIT_tmp$N_res[(nt2/4+1):nt2/2],na.rm=T)
DIT_tmp[(nt2/2+1):(nt2*3/4),32] = mean(DIT_tmp$N_res[(nt2/2+1):(nt2*3/4)],na.rm=T)
DIT_tmp[(nt2*3/4+1):(nt2),32] = mean(DIT_tmp$N_res[(nt2*3/4+1):(nt2)],na.rm=T)
DIT_tmp[1:(nt2/4),33] = mean(DIT_tmp$N_inv[1:(nt2/4)],na.rm=T)
DIT_tmp[(nt2/4+1):nt2/2,33] = mean(DIT_tmp$N_inv[(nt2/4+1):nt2/2],na.rm=T)
DIT_tmp[(nt2/2+1):(nt2*3/4),33] = mean(DIT_tmp$N_inv[(nt2/2+1):(nt2*3/4)],na.rm=T)
DIT_tmp[(nt2*3/4+1):(nt2),33] = mean(DIT_tmp$N_inv[(nt2*3/4+1):(nt2)],na.rm=T)
#Resident competition
    DIT_tmp[1:(nt2/2),34] = spp_prms$aii[2]#Dia
DIT_tmp[1:(nt2/2),35] = spp_prms$aij[2]#Dia
DIT_tmp[(nt2/2+1):nt2,34] = spp_prms$aii[1]#Daph
DIT_tmp[(nt2/2+1):nt2,35] = spp_prms$aij[1]#Daph
#Invader competition
   DIT_tmp[1:(nt2/2),36] = spp_prms$aii[1]#Daph
DIT_tmp[1:(nt2/2),37] = spp_prms$aij[1]#Daph
DIT_tmp[(nt2/2+1):nt2,36] = spp_prms$aii[2]#Dia
DIT_tmp[(nt2/2+1):nt2,37] = spp_prms$aij[2]#Dia
DIT_tmp[,38] = paste(f,DIT_tmp$res_spp,sep="")
    DIT_tmp = as.data.frame(DIT_tmp) 
    mDIT_tmp = rbind(mDIT_tmp,DIT_tmp)
}
#Add two time columns: time1 is absolute time from beginning of simulation, 
#day_n is adjusted relative to the invasion event to match up with the 
#experimental time scale
inv_day = 28
inv_day_n = ((tend*1/delta1+1) - inv_day )
mDIT = cbind(time1 = matrix(seq(0,tend*2+delta1,delta1),dim(mDIT_tmp)[1],1), 
day_n =matrix(seq(0,(tend*2)*1/delta1+1,1)-inv_day_n,dim(mDIT_tmp)[1],1) , mDIT_tmp)
f
spp_prms = out1[[f]]$spp_prms
DIT_tmp = data.frame(matrix(0,nt2,38 ))
colnames(DIT_tmp) = ncnames
 DIT_tmp[,1] = as.matrix(out_inv1[[f]][,2])
    DIT_tmp[1:(nt2/2),2] = as.matrix(out_inv1[[f]][1:(nt2/2),5]) #First Daph as invader
    DIT_tmp[1:(nt2/2),3] = as.matrix(out_inv1[[f]][1:(nt2/2),4])
    DIT_tmp[(nt2/2+1):nt2,2] = as.matrix(out_inv1[[f]][(nt2/2+1):nt2,4]) #Second Dia as invader
    DIT_tmp[(nt2/2+1):nt2,3] = as.matrix(out_inv1[[f]][(nt2/2+1):nt2,5])
    
dim(DIT_tmp)
dim(as.matrix(out_inv1[[f]])
)
tend
delta1
nt2
nt2=8004
mDIT_tmp = data.frame(matrix( nrow=0, ncol =38 ) ) 
ncnames = c("Algae", "N_res","N_inv", "res_spp","inv_spp", "aiE","te1","te2", "te3","ee1","ee2",
"ee3","ai1","ai2","ai3","si1","si2","si3","temperature","invade_monoculture","nspp","alg_per_Nres",
"alg_per_Ninv","zoo","alg_perzoo","res_aii_rt","res_aij_rt","inv_aii_rt",
"inv_aij_rt", "m_alg_perInv", "m_alg_perzoo", "res_K", "inv_K","res_aii", "res_aij", 
"inv_aii","inv_aij", "replicate_number" )
colnames(mDIT_tmp) = ncnames
#mesocosms = factor(c("A","B")) #A is Daphnia invader, B is Daphnia resident
nspps2 = factor(c(1,2)) #1 is the pre-invasion phase, 2 is post-invasion phase
nt21 = length(seq(0,tend,delta1))
nt22=nt2-k
for (f in 1:nwebs){
spp_prms = out1[[f]]$spp_prms
DIT_tmp = data.frame(matrix(0,nt2,38 ))
colnames(DIT_tmp) = ncnames
    DIT_tmp[,1] = as.matrix(out_inv1[[f]][,2])
    DIT_tmp[1:(nt2/2),2] = as.matrix(out_inv1[[f]][1:(nt2/2),5]) #First Daph as invader
    DIT_tmp[1:(nt2/2),3] = as.matrix(out_inv1[[f]][1:(nt2/2),4])
    DIT_tmp[(nt2/2+1):nt2,2] = as.matrix(out_inv1[[f]][(nt2/2+1):nt2,4]) #Second Dia as invader
    DIT_tmp[(nt2/2+1):nt2,3] = as.matrix(out_inv1[[f]][(nt2/2+1):nt2,5])
    
    DIT_tmp[,4] = factor( levels = levels(rspecies)) #Invader/resident IDs
    DIT_tmp[,5] = factor( levels = levels(rspecies))
DIT_tmp[1:(nt2/2),4] = (rspecies)[2]
    DIT_tmp[1:(nt2/2),5] = (rspecies)[1]
   DIT_tmp[(nt2/2+1):nt2,4] = (rspecies)[1]
    DIT_tmp[(nt2/2+1):nt2,5] = (rspecies)[2]
    DIT_tmp[(k+1):nt2,6] = aiE_webS[[f]]$local
    #Because resident corresponds to te1 (ai1, etc.), and which species is 
    #resident switches:
    DIT_tmp[ (k+1):(nt21*2),7:8] = di_webS[[f]]$te_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),7:8] = di_webS[[f]]$te_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 9 ] = di_webS[[f]]$te_local[,1] #Algae
DIT_tmp[ (k+1):(nt21*2-k),10:11] = di_webS[[f]]$ee_local[1:(nt21*2-2*k),4:3]
    DIT_tmp[ (nt21*2+1):(nt21*4-2*k),10:11] = di_webS[[f]]$ee_local[(nt21*2+1):(nt21*4-2*k),3:4]
    DIT_tmp[ (k*2):(nt2), 12 ] = di_webS[[f]]$ee_local[,1] #Algae
  DIT_tmp[ (k+1):(nt21*2),13:14] = di_webS[[f]]$ai_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),13:14] = di_webS[[f]]$ai_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 15 ] = di_webS[[f]]$ai_local[,1] #Algae
  DIT_tmp[ (k+1):(nt21*2),16:17] = di_webS[[f]]$si_local[1:(nt21*2-k),4:3]
    DIT_tmp[ (nt21*2+k+1):(nt21*4),16:17] = di_webS[[f]]$si_local[(nt21*2+1):(nt21*4-k),3:4]
    DIT_tmp[(k+1):(nt2), 18 ] = di_webS[[f]]$si_local[,1] #Algae
    #Temperatures
    DIT_tmp[,19] = temps[f]
    #Treatment type (invasion vs. monoculture) and number of species
spp1 = c(1:(nt2/4),(nt2/2+1):(nt2/2+nt2/4)) #Sinlge species
    spp2 = c((nt2/4+1):(nt2/2),(nt2/2+nt2/4+1):nt2) #Invasion, 2 spp
    DIT_tmp[,20] = factor(levels = levels(invader))
    DIT_tmp[1:nt2/2,20] = invader[2]
    DIT_tmp[(nt2/2+1):nt2,20] = invader[3]
    DIT_tmp[spp1,20] =  invader[1]
    DIT_tmp[,21] = factor(levels = levels(nspps2))
    DIT_tmp[spp1,21] = nspps2[1]
    DIT_tmp[spp2,21] = nspps2[2]
#Algal consumption rates. 
#Resident
DIT_tmp[1:(nt2/2),22] = (spp_prms$cC[1,2]*DIT_tmp$Algae[1:(nt2/2)])/DIT_tmp[1:(nt2/2),2]#Dia
DIT_tmp[(nt2/2+1):nt2,22]  = (spp_prms$cC[1,1]*DIT_tmp$Algae[(nt2/2+1):nt2])/DIT_tmp[(nt2/2+1):nt2,2]#Daph
DIT_tmp[,22] [is.infinite(DIT_tmp$alg_per_Nres)] = NA
#Invader
    DIT_tmp[1:(nt2/2),23] = (spp_prms$cC[1,1]*DIT_tmp$Algae[1:(nt2/2)])/DIT_tmp[1:(nt2/2),3]#Daph
DIT_tmp[(nt2/2+1):nt2,23] = (spp_prms$cC[1,2]*DIT_tmp$Algae[(nt2/2+1):nt2])/DIT_tmp[(nt2/2+1):nt2,3]#Dia
DIT_tmp[,23][is.infinite(DIT_tmp$alg_per_Ninv)] = NA
#Total Zoo
DIT_tmp[,24] = DIT_tmp$N_res+DIT_tmp$N_inv
DIT_tmp[,25] = ((spp_prms$cC[1,1]+spp_prms$cC[1,2])*DIT_tmp$Algae)/DIT_tmp$zoo
DIT_tmp[,25] [is.infinite(DIT_tmp$alg_perzoo)] = NA
#Real-time competition for resources: 
#Resident:
DIT_tmp[1:(nt2/2),26] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]^2*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),27] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,26] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,1]^2*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,27] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
#Invader: 
DIT_tmp[1:(nt2/2),28] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,1]^2*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),29] = rowSums( out_inv1[[f]][1:(nt2/2),2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,1]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,28] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]^2*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[(nt2/2+1):nt2,29] = rowSums( out_inv1[[f]][(nt2/2+1):nt2,2:3] * matrix( 
t(spp_prms$cC[,2]*spp_prms$cC[,1]*spp_prms$rC[,2]) * (1/spp_prms$rR), length(1:(nt2/2)), 2, byrow=T ) )
DIT_tmp[1:(nt2/2),30] = mean(DIT_tmp$m_alg_perInv[1:(nt2/2)])
DIT_tmp[(nt2/2+1):nt2,30] = mean(DIT_tmp$m_alg_perInv[(nt2/2+1):nt2])
DIT_tmp[,31] = mean(DIT_tmp$alg_perzoo,na.rm=T )
#Get the carrying capacity for each scenario: 
DIT_tmp[1:(nt2/4),32] = mean(DIT_tmp$N_res[1:(nt2/4)],na.rm=T)
DIT_tmp[(nt2/4+1):nt2/2,32] = mean(DIT_tmp$N_res[(nt2/4+1):nt2/2],na.rm=T)
DIT_tmp[(nt2/2+1):(nt2*3/4),32] = mean(DIT_tmp$N_res[(nt2/2+1):(nt2*3/4)],na.rm=T)
DIT_tmp[(nt2*3/4+1):(nt2),32] = mean(DIT_tmp$N_res[(nt2*3/4+1):(nt2)],na.rm=T)
DIT_tmp[1:(nt2/4),33] = mean(DIT_tmp$N_inv[1:(nt2/4)],na.rm=T)
DIT_tmp[(nt2/4+1):nt2/2,33] = mean(DIT_tmp$N_inv[(nt2/4+1):nt2/2],na.rm=T)
DIT_tmp[(nt2/2+1):(nt2*3/4),33] = mean(DIT_tmp$N_inv[(nt2/2+1):(nt2*3/4)],na.rm=T)
DIT_tmp[(nt2*3/4+1):(nt2),33] = mean(DIT_tmp$N_inv[(nt2*3/4+1):(nt2)],na.rm=T)
#Resident competition
    DIT_tmp[1:(nt2/2),34] = spp_prms$aii[2]#Dia
DIT_tmp[1:(nt2/2),35] = spp_prms$aij[2]#Dia
DIT_tmp[(nt2/2+1):nt2,34] = spp_prms$aii[1]#Daph
DIT_tmp[(nt2/2+1):nt2,35] = spp_prms$aij[1]#Daph
#Invader competition
   DIT_tmp[1:(nt2/2),36] = spp_prms$aii[1]#Daph
DIT_tmp[1:(nt2/2),37] = spp_prms$aij[1]#Daph
DIT_tmp[(nt2/2+1):nt2,36] = spp_prms$aii[2]#Dia
DIT_tmp[(nt2/2+1):nt2,37] = spp_prms$aij[2]#Dia
DIT_tmp[,38] = paste(f,DIT_tmp$res_spp,sep="")
    DIT_tmp = as.data.frame(DIT_tmp) 
    mDIT_tmp = rbind(mDIT_tmp,DIT_tmp)
}
#Add two time columns: time1 is absolute time from beginning of simulation, 
#day_n is adjusted relative to the invasion event to match up with the 
#experimental time scale
inv_day = 28
inv_day_n = ((tend*1/delta1+1) - inv_day )
mDIT = cbind(time1 = matrix(seq(0,tend*2+delta1,delta1),dim(mDIT_tmp)[1],1), 
day_n =matrix(seq(0,(tend*2)*1/delta1+1,1)-inv_day_n,dim(mDIT_tmp)[1],1) , mDIT_tmp)
save(file="daphDia_DIT_1220_NoVar_k2f1000.var", "m1_DIT","out1R","di_webR",
"te_webR","si_webR", "aiE_webR" , "mDIT", "out1","out_inv1","di_webS",
"te_webS","si_webS", "aiE_webS")
m1_DIT_sub = m1_DIT  #Daphnia at 28 C
mDIT_sub = mDIT
ggplot()+ 
geom_line(data=mDIT_sub, mapping= aes(x = time1-tend+1, y =N_res,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_line( data=mDIT_sub, mapping=aes(x = time1-tend+1, y =N_inv,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =N_res,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =N_inv,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) )+  
facet_grid(temperature~invade_monoculture) +ylim(0,2E2) +xlim(0,30) +
#scale_color_discrete(name ="", labels = c("Experiment", "Simulation" ) )+
ylab("Population")+
xlab("Day")+
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks = element_blank())
ggplot()+ 
geom_line(data=mDIT_sub, mapping= aes(x = time1-tend+1, y =ai1,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_line( data=mDIT_sub, mapping=aes(x = time1-tend+1, y =ai2,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =ai1,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =ai2,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) )+  
facet_grid(temperature~invade_monoculture) +xlim(0,30)    +
scale_color_discrete(name ="", labels = c("Experiment", "Simulation" ) )+
ylab("Bits (AI) ")+
xlab("Day")+
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks = element_blank())
m1_DIT_sub = subset(m1_DIT, invade_monoculture != "monoculture") #Daphnia at 28 C
mDIT_sub = subset(mDIT, invade_monoculture != "monoculture")
m1_DIT_sub$res_spp = revalue(m1_DIT_sub$res_spp, c("daphnia" = "daphnia_E", "diaphanosoma" = "dia_E" ) )
m1_DIT_sub$inv_spp = revalue(m1_DIT_sub$inv_spp, c("daphnia" = "daphnia_E", "diaphanosoma" = "dia_E" ) )
#Some summary numbers
aie_sum=mDIT_sub %>% 
dplyr::group_by(temperature,invade_monoculture,replicate_number, res_spp,inv_spp,nspp,res_aii,res_aij,inv_aii,inv_aij) %>%
dplyr::summarize(aiE_mean = mean(aiE,na.rm=T),
alg_Nres_mean = mean(alg_per_Nres,na.rm=T),
alg_Ninv_mean = mean(alg_per_Ninv,na.rm=T)) %>% as.data.frame
aie_sumR=m1_DIT_sub %>% 
dplyr::group_by(temperature,invade_monoculture,replicate_number, res_spp,inv_spp,res_aii,res_aij,inv_aii,inv_aij) %>%
dplyr::summarize(aiE_mean = mean(aiE,na.rm=T),
alg_Nres_mean = mean(alg_per_Nres,na.rm=T),
alg_Ninv_mean = mean(alg_per_Ninv,na.rm=T)) %>% as.data.frame
ggplot()+ 
geom_point( data=mDIT_sub,  mapping= aes(x = (inv_aij_rt*res_aij_rt)/(res_aii_rt*inv_aii_rt), y =aiE,  color = res_spp, group = interaction(res_spp,replicate_number) ) ) +
geom_point( data=mDIT_sub,  mapping=aes(x = (inv_aij_rt*res_aij_rt)/(res_aii_rt*inv_aii_rt), y =aiE,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=aie_sum,  mapping= aes(x =(inv_aij*res_aij)/(inv_aii*res_aii) , y =aiE_mean,  color = "1", group=interaction(res_spp,replicate_number) ),size=3) +
geom_point(data=aie_sum,  mapping= aes(x =(inv_aij*res_aij)/(inv_aii*res_aii) , y =aiE_mean,  color = "2", group=interaction(inv_spp,replicate_number) ),size=3 ) +
geom_point( data=m1_DIT_sub,  mapping= aes(x = (inv_aij*res_aij)/(res_aii*inv_aii), y =aiE,  color = res_spp, group = interaction(res_spp,replicate_number) ) ) +
geom_point( data=m1_DIT_sub,  mapping=aes(x = (inv_aij*res_aij)/(res_aii*inv_aii), y =aiE,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=aie_sumR,  mapping= aes(x =(inv_aij*res_aij)/(inv_aii*res_aii) , y =aiE_mean,  color = "3", group=interaction(res_spp,replicate_number) ),size=3) +
geom_point(data=aie_sumR,  mapping= aes(x =(inv_aij*res_aij)/(inv_aii*res_aii) , y =aiE_mean,  color = "4", group=interaction(inv_spp,replicate_number) ),size=3 ) +
facet_grid(temperature~invade_monoculture)
ggplot()+ 
geom_point( data=aie_sum,  mapping= aes(y =aiE_mean, x =temperature,  color = interaction( res_spp, nspp ) ) )  +
geom_point( data=aie_sum,  mapping=aes(y =aiE_mean, x =temperature,  color = interaction( inv_spp, nspp) ) ) +  
geom_point( data=aie_sumR,  mapping= aes(y =aiE_mean, x =temperature,  color = interaction( res_spp, nspp ) ) )  +
geom_point( data=aie_sumR,  mapping=aes(y =aiE_mean, x =temperature,  color = interaction( inv_spp, nspp) ) ) +  
facet_grid(invade_monoculture~.) 
k=2
f1R=1 #scaling term for converting fractional populations in simulations
f1S=1 #scaling term for converting fractional populations in simulations
for (w in 1:nwebs){ 
pop_ts = ceiling(f1S*out_inv1[[w]][,2:nspp])
nt1 = 1
nt2 = dim(pop_ts)[1] 
if(nt2 <=k){ k = 1}
if(nt1 != nt2) { 
#=============================================================================
# This function gives:
# EE_mean   Average mutual information per species
# AI_mean   Average active information per species
# TE_mean   Average transfer entropy per species
# 
# EE_local    Local mutual information per species
# AI_local    Local active information per species
# TE_local    Local transfer entropy per species
#=============================================================================
di_webS[w] = list(get_info_dynamics(pop_ts = pop_ts , k=k,with_blocks=TRUE))
## This code takes the population time-series counts output by the ODEs and 
## calculates the average Transfer Entropy from each species to every other 
## species. The goal is to get an overview of the major information pathways 
## in the web.   
#=============================================================================
# This function gives:
# te_web    Average transfer entropy per species as a pairwise matrix
#=============================================================================
te_webS[w] = list( get_te_web( pop_ts = pop_ts, k=k) )
#=============================================================================
# This function gives:
# aiE_web    The AI of the entire ensemble, treated as a single time series. 
#=============================================================================
aiE_webS[w] = list( get_ais (  series1 = pop_ts[,3:4], k=k, ensemble = TRUE)    )
}
}
save(file="daphDia_DIT_1220_NoVar_k2f1.var", "m1_DIT","out1R","di_webR",
"te_webR","si_webR", "aiE_webR" , "mDIT", "out1","out_inv1","di_webS",
"te_webS","si_webS", "aiE_webS")
m1_DIT_sub = subset(m1_DIT, invade_monoculture != "monoculture") #Daphnia at 28 C
mDIT_sub = subset(mDIT, invade_monoculture != "monoculture")
ggplot()+ 
geom_line(data=mDIT_sub, mapping= aes(x = time1-tend+1, y =N_res,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_line( data=mDIT_sub, mapping=aes(x = time1-tend+1, y =N_inv,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =N_res,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =N_inv,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) )+  
facet_grid(temperature~invade_monoculture) +ylim(0,2E2) +xlim(0,30) +
#scale_color_discrete(name ="", labels = c("Experiment", "Simulation" ) )+
ylab("Population")+
xlab("Day")+
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks = element_blank())
ggplot()+ 
geom_line(data=mDIT_sub, mapping= aes(x = time1-tend+1, y =aiE,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_line( data=mDIT_sub, mapping=aes(x = time1-tend+1, y =aiE,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =aiE,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =aiE,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) )+  
facet_grid(temperature~invade_monoculture) +xlim(0,30)    +
scale_color_discrete(name ="", labels = c("Experiment", "Simulation" ) )+
ylab("Bits (AI) ")+
xlab("Day")+
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks = element_blank())
m1_DIT_sub = m1_DIT  #Daphnia at 28 C
mDIT_sub = mDIT
ggplot()+ 
geom_line(data=mDIT_sub, mapping= aes(x = time1-tend+1, y =aiE,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_line( data=mDIT_sub, mapping=aes(x = time1-tend+1, y =aiE,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =aiE,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =aiE,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) )+  
facet_grid(temperature~invade_monoculture) +xlim(0,30)    +
scale_color_discrete(name ="", labels = c("Experiment", "Simulation" ) )+
ylab("Bits (AI) ")+
xlab("Day")+
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks = element_blank())
ggplot()+ 
geom_line(data=mDIT_sub, mapping= aes(x = time1-tend+1, y =ai1,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_line( data=mDIT_sub, mapping=aes(x = time1-tend+1, y =ai2,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) ) +  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =ai1,  color = res_spp, group = interaction(res_spp,replicate_number) ) )+  
geom_point(data=m1_DIT_sub, mapping= aes(x = day_n-inv_day+1, y =ai2,  color = inv_spp, group = interaction(inv_spp,replicate_number) ) )+  
facet_grid(temperature~invade_monoculture) + xlim(0,30)    +
scale_color_discrete(name ="", labels = c("Experiment", "Simulation" ) )+
ylab("Bits (AI) ")+
xlab("Day")+
theme(axis.title.x=element_blank(),axis.text.x = element_blank(), axis.ticks = element_blank())
q()
